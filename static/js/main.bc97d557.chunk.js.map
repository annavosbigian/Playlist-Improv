{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["token","SearchBar","props","state","term","search","bind","handleTermChange","enterSearch","event","this","setState","target","value","onSearch","key","className","onChange","onKeyPress","placeholder","maxLength","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","onSave","class","playlistTracks","Spotify","getAccessToken","accessToken","window","location","href","match","expiration","expire","Number","setTimeout","history","pushState","searchTerm","fetch","headers","Authorization","then","response","json","items","artists","uri","savePlaylist","playlistName","trackURIs","console","log","user_id","ok","method","body","JSON","stringify","playlist_id","uris","recommendSimilarSongs","App","improviseTracks","updatePlaylistName","addEventListener","find","playlistTrack","results","combinedTracks","concat","push","filter","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc97d557.chunk.js","sourcesContent":["let token;\nconst client_id = \"6e7ff685b81e464aa3f1dd4cc8f8452e\";\nconst redirect_uri =  \"http://playlistimprov.surge.sh/\";\n\nconst Spotify = {\n    //logs the user into Spotify and gets their approval to edit the app\n    getAccessToken(){\n        if (token){\n            return token;\n        }\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiration = window.location.href.match(/expires_in=([^&]*)/);\n        if (accessToken && expiration){\n            token = accessToken[1];\n            const expire = Number(expiration[1]);\n            window.setTimeout(() => token = '', expire * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return token;\n        }\n        else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`\n        }\n        },\n    //contacts the spotify api and returns results matching the search term\n    search(searchTerm){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n        headers: {Authorization: `Bearer ${accessToken}`}\n          }).then(response => {\n                  return response.json();}\n            ).then(response => {\n                if (!response.tracks){\n                    return [];\n                }\n                return response.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri}));\n              \n          });\n    },\n    //creates and saves a new playlist to the user's account\n    savePlaylist(playlistName, trackURIs){\n        if (!playlistName || !trackURIs){\n            console.log(\"name is \" + playlistName);\n            return;\n        }\n        console.log(\"in save playlist\");\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let user_id;\n        return fetch(`https://api.spotify.com/v1/me`, {\n            headers: headers})\n            .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n        }).then(response => {\n            user_id = response.id;\n            return fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: playlistName})\n        }).then(response => {console.log(\"I am here\"); return response.json()})\n            .then(response => {\n                console.log(\"hi there!\");\n                const playlist_id = response.id;\n                console.log(\"track uris are \" + trackURIs);\n                return fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`,{\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackURIs})\n                });\n            });\n        });\n    }, \n    //contacts the spotify api with the chosen song and returns 10 similar songs\n    recommendSimilarSongs(track){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/recommendations?limit=10&market=ES&seed_tracks=${track.id}`, {\n        headers: {Authorization: `Bearer ${accessToken}`}\n          }).then(response => {\n                  return response.json();}\n            ).then(response => {\n                if (!response.tracks){\n                    return [];\n                }\n                return response.tracks.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    uri: track.uri}));            \n          });\n    }\n};\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            term: ''\n        };\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.enterSearch = this.enterSearch.bind(this);\n    }\n\n    //Takes searched string\n    handleTermChange(event){\n        this.setState({term: event.target.value});\n    }\n\n    //Sends string to search\n    search(){\n        this.props.onSearch(this.state.term);\n    }\n\n    enterSearch(event) {\n        if (event.key === \"Enter\") {\n          this.search();\n        }\n      }\n\n    render(){\n        return (\n            <div className=\"SearchBar\">\n            <input onChange={this.handleTermChange} onKeyPress={this.enterSearch} placeholder=\"Enter a song, album or artist\" maxLength=\"25\"/>\n            <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    //If in tracklist tab, lets user add to playlist with +\n    //If in playlist tab, lets user remove with -\n    renderAction(){\n        if (this.props.isRemoval){\n            return (<button onClick={this.removeTrack} className=\"Track-action\">-</button>);\n        }\n        return (<button onClick={this.addTrack} className=\"Track-action\">+</button>);\n    };\n\n    //Adds to playlist\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    }\n\n    //Removes from playlist\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n\n    render(){\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './TrackList.css';\nimport {Track} from '../Track/Track';\n\n//Shows a list of all tracks that show up in the search results with their details\nexport class TrackList extends React.Component{\n\n    render(){\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => { \n                    return <Track onRemove={this.props.onRemove} \n                    isRemoval={this.props.isRemoval} track={track} \n                    onAdd={this.props.onAdd} key={track.id}/>})}\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './SearchResults.css';\nimport {TrackList} from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component{\n    render(){\n        return (\n            <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList onAdd={this.props.onAdd} isRemoval={false} tracks={this.props.searchResults}/>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './Playlist.css';\nimport {TrackList} from '../TrackList/TrackList';\n\nexport class Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    //Reads new playlist name \n    handleNameChange(event){\n        this.props.onNameChange(event.target.value);\n    }\n\n    render(){\n        return (\n            <div className=\"Playlist\">\n            <input onChange={this.handleNameChange} defaultValue={'New Playlist'} maxLength=\"20\"/>\n            <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n            <TrackList class=\"boxin\" onRemove={this.props.onRemove} isRemoval={true} tracks={this.props.playlistTracks}/> \n            </div>\n        );\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify'\n\nexport class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"Newly Improvised\",\n      playlistTracks: []\n  }\n    this.improviseTracks = this.improviseTracks.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  //Automatically sends the user to the Spotify login the first time they open\n  componentDidMount() {\n    window.addEventListener('load', () => {Spotify.getAccessToken()});\n  }\n\n  //Adds the chosen track and calls the song improv function and adds those to playlist\n  improviseTracks(track){\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(playlistTrack => playlistTrack.id === track.id)){\n      return;\n    }\n    Spotify.recommendSimilarSongs(track).then(results => {\n      const combinedTracks = tracks.concat(results);\n      this.setState({playlistTracks: combinedTracks});\n    });\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  //Delete track from playlist array\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(playlistTrack => playlistTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  //Changes playlist name\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  //Sends name and uris (uniform resource indicators) and clears the playlist\n  savePlaylist(){\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    console.log(\"finished trackuris\");\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(()=>{\n      this.setState({\n        playlistName: 'Newly Improvised',\n        playlistTracks: []\n      });\n    });\n\n  }\n\n  //Sends search term request to Spotify & adds response to search results column\n  search(searchTerm){\n    Spotify.search(searchTerm).then(results => {\n      this.setState({searchResults: results});\n    });\n  }\n\n  render(){\n    return (\n      <div >\n        <h1>Playlist Improv</h1>\n        <p>Give a tune, generate a playlist of similar songs</p>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.improviseTracks} />\n            <Playlist onSave={this.savePlaylist} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}/>\n          </div>\n        </div>\n      </div>\n  );\n}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}